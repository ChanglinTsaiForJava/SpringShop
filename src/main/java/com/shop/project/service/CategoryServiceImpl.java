package com.shop.project.service;import com.shop.project.exceptions.APIException;import com.shop.project.exceptions.ResourceNotFoundException;import com.shop.project.model.Category;import com.shop.project.pyaload.CategoryDTO;import com.shop.project.pyaload.CategoryResponse;import com.shop.project.repository.CategoryRepository;import org.modelmapper.ModelMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Service;import java.util.List;import java.util.stream.Collectors;//tell spring to manage it as a bean@Servicepublic class CategoryServiceImpl implements CategoryService {//    private List<Category> categories= new ArrayList<>();    //manageId    @Autowired    private CategoryRepository categoryRepository;    @Autowired    private ModelMapper modelMapper;    @Override    public CategoryResponse getAllCategories(Integer pageNumber, Integer pageSize) {        //Pageable 是一個介面，代表「分頁設定」        //PageRequest.of() 是最常用的靜態方法，用來建立分頁物件        //pageNumber: 第幾頁（從 0 開始）        //pageSize: 每一頁幾筆資料        //範例：PageRequest.of(0, 5) 就是「第1頁，5筆資料」        Pageable pageDetails= PageRequest.of(pageNumber, pageSize);        //使用 Repository 的內建方法 findAll(Pageable)        //回傳一個 Page<Category>，這個 Page 是一個分頁的集合類型，比 List 多很多資訊：        //你可以從 categoryPage 拿到：        //categoryPage.getContent();        // 當頁的資料（List<Category>）        //categoryPage.getTotalElements(); // 總共幾筆資料        //categoryPage.getTotalPages();    // 總共幾頁        //categoryPage.getNumber();        // 現在是第幾頁（從 0 開始）        //categoryPage.getSize();          // 一頁幾筆        //categoryPage.isLast();           // 是不是最後一頁        Page<Category> categoryPage = categoryRepository.findAll(pageDetails);        List<Category> categories = categoryPage.getContent();        if (categories.isEmpty())            throw new APIException("No category created till now.");        List<CategoryDTO> categoryDTOS = categories.stream().map(category -> modelMapper.map(category, CategoryDTO.class)).toList();        CategoryResponse categoryResponse = new CategoryResponse();        //下面會回傳也面統計資料（哪一頁面 有幾個東西）        categoryResponse.setContent(categoryDTOS);        categoryResponse.setPageNumber(categoryPage.getNumber());        categoryResponse.setPageSize(categoryPage.getSize());        categoryResponse.setTotalElements(categoryPage.getTotalElements());        categoryResponse.setTotalPages(categoryPage.getTotalPages());        categoryResponse.setLastPage(categoryPage.isLast());        return categoryResponse;    }    @Override    public CategoryDTO createCategory(CategoryDTO categoryDTO) {        //傳入dto 轉成一般型態 等到處理完了再改回dto傳出        Category category = modelMapper.map(categoryDTO, Category.class);        Category categoryFromDB = categoryRepository.findByCategoryName(category.getCategoryName());        if (categoryFromDB != null)            throw new APIException("Category with the name " + category.getCategoryName() + " already exists !!!");        Category savedCategory= categoryRepository.save(category);        return modelMapper.map(savedCategory, CategoryDTO.class);    }    @Override    public CategoryDTO  deleteCategory(Long categoryId) {        Category category = categoryRepository.findById(categoryId)                .orElseThrow(() -> new ResourceNotFoundException("Category","categoryId",categoryId));        categoryRepository.delete(category);        return modelMapper.map(category, CategoryDTO.class);    }    @Override    public CategoryDTO updateCategory(CategoryDTO categoryDTO, Long categoryId) {        Category savedCategory = categoryRepository.findById(categoryId)                .orElseThrow(() -> new ResourceNotFoundException("Category","categoryId",categoryId));        Category category = modelMapper.map(categoryDTO, Category.class);        category.setCategoryId(categoryId);        savedCategory = categoryRepository.save(category);        return modelMapper.map(savedCategory, CategoryDTO.class);    }}